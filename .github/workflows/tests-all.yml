name: Pipeline de Testes de Qualidade

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup-and-cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Repositório
        uses: actions/checkout@v4

      - name: Setup Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar Dependências
        run: npm install

  backend-api-tests:
    runs-on: ubuntu-latest
    needs: setup-and-cache
    steps:
      - name: Checkout do Repositório
        uses: actions/checkout@v4

      - name: Setup Node.js v20 com Cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar Dependências do Cache
        run: npm install

      - name: Executar Testes de Backend (API)
        run: npm run api:dev
        env:
          CYPRESS_ADMIN_EMAIL: ${{ secrets.BACKEND_ADMIN_EMAIL }}
          CYPRESS_ADMIN_PASSWORD: ${{ secrets.BACKEND_ADMIN_PASSWORD }}

      - name: Gerar Relatório HTML Backend
        if: always()
        run: npm run generate:backend-report

      - name: Publicar Relatório Backend
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: relatorio-testes-backend
          path: mochawesome-report/backend-report.html

  frontend-e2e-tests:
    runs-on: ubuntu-latest
    needs: [setup-and-cache, backend-api-tests]
    steps:
      - name: Checkout do Repositório
        uses: actions/checkout@v4

      - name: Setup Node.js v20 com Cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar Dependências do Cache
        run: npm install

      - name: Executar Testes de Frontend (E2E)
        run: npm run ui:dev
        env:
          CYPRESS_DEFAULT_USER_EMAIL: ${{ secrets.FRONTEND_DEFAULT_USER_EMAIL }}
          CYPRESS_DEFAULT_USER_PASSWORD: ${{ secrets.FRONTEND_DEFAULT_USER_PASSWORD }}

      - name: Gerar Relatório HTML Frontend
        if: always()
        run: npm run generate:frontend-report

      - name: Publicar Relatório Frontend
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: relatorio-testes-frontend
          path: mochawesome-report/frontend-report.html

  performance-tests:
    runs-on: ubuntu-latest
    needs: [setup-and-cache, backend-api-tests]
    steps:
      - name: Checkout do Repositório
        uses: actions/checkout@v4

      - name: Setup K6
        uses: grafana/setup-k6-action@v1
        
      - name: Setup Node.js v20 com Cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar Dependências do Cache
        run: npm install

      - name: Setup de Dados para K6 (via Cypress)
        run: npm run k6:setup
        env:
          CYPRESS_ADMIN_EMAIL: ${{ secrets.BACKEND_ADMIN_EMAIL }}
          CYPRESS_ADMIN_PASSWORD: ${{ secrets.BACKEND_ADMIN_PASSWORD }}

      - name: Criar Diretório de Relatórios K6
        run: mkdir -p performance-tests/test_reports/k6/
    
      - name: Executar Testes de Carga (K6)
        run: npm run k6:run
        env:
          K6_API_URL: https://serverest.dev

      - name: Gerar Relatório HTML do K6
        if: always()
        run: npm run generate:k6-report

      - name: Publicar Relatório K6
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: relatorio-teste-carga
          path: performance-tests/test_reports/k6/k6_report.html

  resumo-relatorios:
    runs-on: ubuntu-latest
    needs: [backend-api-tests, frontend-e2e-tests, performance-tests]
    if: always()
    steps:
      - name: Checkout do Repositório
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download dos Artefatos de Relatório
        uses: actions/download-artifact@v4
        
      - name: Organizar Relatórios e Gerar Dashboard
        run: |
          # Cria a estrutura de pastas esperada pelo script
          mkdir -p consolidated_reports
          mv relatorio-testes-backend consolidated_reports/backend
          mv relatorio-testes-frontend consolidated_reports/frontend
          mv relatorio-teste-carga consolidated_reports/performance
          
          # Executa o script que cria o index.html
          npm run generate:consolidated-report
          
      - name: Fazer upload do Resumo Consolidado
        uses: actions/upload-artifact@v4
        with:
          name: resumo-testes-consolidado
          path: consolidated_reports/